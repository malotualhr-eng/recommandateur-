openapi: 3.1.0
info:
  title: Recommandateur API
  version: "1.0.0"
  description: >
    API d’actions pour GPT Creator, connectée au Worker Cloudflare du Recommandateur.
    Auth flexible côté Worker (Bearer / query / header), mais côté GPT on utilise la clé en query (?api_token=...).

servers:
  - url: https://recommandateur.malotualhr.workers.dev

security:
  - ApiTokenQuery: []

tags:
  - name: Meta
  - name: Settings
  - name: Lists
  - name: Backup
  - name: Podium
  - name: Recommendations
  - name: Cache
  - name: Diagnostics

components:
  securitySchemes:
    ApiTokenQuery:
      type: apiKey
      in: query
      name: api_token
      description: Jeton API comme paramètre d’URL (?api_token=...).

  schemas:
    Meta:
      type: object
      properties:
        app_name: { type: string }
        app_version: { type: string }
        last_updated: { type: string, description: ISO datetime }
        ui_schema_id: { type: string }
        welcome_template: { type: string }
        menu:
          type: array
          items:
            type: object
            properties:
              num: { type: integer }
              emoji: { type: string }
              label: { type: string }
            required: [label]
      required: [app_name, app_version, last_updated, menu]

    MetaPatch:
      type: object
      description: Patch "souple" pour /meta (tous champs optionnels).
      properties:
        app_name: { type: string }
        app_version: { type: string }
        ui_schema_id: { type: string }
        welcome_template: { type: string }
        menu:
          type: array
          items:
            type: object
            properties:
              num: { type: integer }
              emoji: { type: string }
              label: { type: string }

    MenuUpdate:
      type: object
      properties:
        menu:
          type: array
          items:
            type: object
            properties:
              num: { type: integer }
              emoji: { type: string }
              label: { type: string }
            required: [label]
        welcome_template: { type: string }
      required: [menu]

    Settings:
      type: object
      description: Réglages persistants côté KV. Tous champs optionnels (patch possible).
      properties:
        config_version: { type: integer }
        updated_at: { type: string }
        thresholds:
          type: object
          properties:
            default: { type: number }
            horror: { type: number }
        weights:
          type: object
          description: Pondérations du scoring L1 (la somme est normalisée par le Worker).
          properties:
            user_pref:
              type: number
              description: Poids accordé aux préférences utilisateur (cible 0,20).
            allocine:
              type: number
              description: Poids accordé aux notes Allociné (cible 0,60).
            castcrew:
              type: number
              description: Poids accordé aux affinités cast & crew (cible 0,20).
        list_interpretation:
          type: object
          properties:
            parked_bonus: { type: number }
            reject_malus: { type: number }
            recency_weight: { type: number }
        exclusions:
          type: object
          properties:
            rated: { type: boolean }
            parked: { type: boolean }
            rejects: { type: boolean }
        dedup:
          type: object
          properties:
            alias_vo_vf_vq: { type: boolean }
            remakes: { type: boolean }
            sagas: { type: boolean }
        templates:
          type: object
          properties:
            l1_card: { type: string }
            l3_item: { type: string }
            genres:
              type: object
              properties:
                case: { type: string }
                joiner: { type: string }
        genre_aliases:
          type: object
          additionalProperties:
            type: array
            items: { type: string }
        salves:
          type: object
          properties:
            formats_allowed:
              type: array
              items: { type: string }
            format_profiles:
              type: object
              additionalProperties:
                type: object
                properties:
                  films: { type: integer }
                  series: { type: integer }
                  enforce: { type: boolean }
            auto_complete_missing: { type: boolean }
        behaviors:
          type: object
          additionalProperties:
            type: object
            properties:
              cache_pool_enabled: { type: boolean }
              cache_pool_keys:
                type: array
                items: { type: string }
              cache_pool_strategy: { type: string }
              cache_pool_resync_if_empty: { type: boolean }
              cache_keys:
                type: array
                items: { type: string }
              cache_sync_each_action: { type: boolean }
              cache_flush_on_write: { type: boolean }
              castcrew_preferences:
                type: object
                properties:
                  favorites:
                    type: array
                    items: { type: string }
                  blacklist:
                    type: array
                    items: { type: string }
        ux_prompts:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: array
                items: { type: string }
        algo_summary:
          type: object
          properties:
            version: { type: string }
            current: { type: string }
            changelog:
              type: array
              items:
                type: object
                properties:
                  version: { type: string }
                  at: { type: string }
                  note: { type: string }
                  text: { type: string }

    RatingItem:
      type: object
      properties:
        canonical_key: { type: string }
        title_original: { type: string }
        year: { type: integer }
        type: { type: string, enum: [film, serie] }
        genres:
          type: array
          items: { type: string }
        rating:
          type: number
          description: note sur 5 (utiliser le point décimal, ex. 3.5)
        rated_at: { type: string }
      required: [canonical_key, title_original, type, rating]

    ParkedItem:
      type: object
      properties:
        canonical_key: { type: string }
        title_original: { type: string }
        year: { type: integer }
        type: { type: string, enum: [film, serie] }
        genres:
          type: array
          items: { type: string }
        added_at: { type: string }
      required: [canonical_key, title_original, type]

    RejectItem:
      type: object
      properties:
        canonical_key: { type: string }
        title_original: { type: string }
        year: { type: integer }
        type: { type: string, enum: [film, serie] }
        genres:
          type: array
          items: { type: string }
        added_at: { type: string }
      required: [canonical_key, title_original, type]

    ParkedPodium:
      type: object
      properties:
        keys:
          type: array
          items: { type: string }
      required: [keys]

    ListResponse:
      type: object
      properties:
        total: { type: integer }
        offset: { type: integer }
        limit: { type: integer }
        items:
          type: array
          items: { type: object }

    CachePoolResponse:
      type: object
      properties:
        synced_at: { type: string }
        ratings:
          type: array
          items: { $ref: '#/components/schemas/RatingItem' }
        parked:
          type: array
          items: { $ref: '#/components/schemas/ParkedItem' }
        rejects:
          type: array
          items: { $ref: '#/components/schemas/RejectItem' }

    L1Recommendation:
      type: object
      properties:
        titre: { type: string }
        intro:
          type: string
          description: Accroche à afficher avant la carte L1 (issue de ux_prompts.l1_intro_pool).
        formatted_card: { type: string }
        poster_url:
          type: string
          format: uri
        notes:
          type: object
          properties:
            spectateurs: { type: string }
            presse: { type: string }
        raw:
          type: object
          additionalProperties: true
        score_breakdown:
          type: object
          properties:
            weights:
              type: object
              properties:
                allocine: { type: number }
                user_pref: { type: number }
                castcrew: { type: number }
            components:
              type: object
              properties:
                allocine: { type: number }
                user_pref: { type: number }
                castcrew: { type: number }

    DiagResponse:
      type: object
      properties:
        ok: { type: boolean }
        kvBound: { type: boolean }
        hasApiToken: { type: boolean }
        authorized: { type: boolean }
        counts:
          type: object
          properties:
            ratings: { type: integer }
            parked: { type: integer }
            rejects: { type: integer }
            parked_podium: { type: integer }
        versions:
          type: object
          properties:
            app_version: { type: string }
            config_version: { type: integer }

    WriteResult:
      type: object
      properties:
        ok: { type: boolean }
        added: { type: boolean }
        updated: { type: boolean }
        count: { type: integer }
        reason: { type: string }

    BackupExport:
      type: object
      properties:
        exported_at: { type: string }
        meta: { $ref: '#/components/schemas/Meta' }
        settings: { $ref: '#/components/schemas/Settings' }
        ratings:
          type: array
          items: { $ref: '#/components/schemas/RatingItem' }
        parked:
          type: array
          items: { $ref: '#/components/schemas/ParkedItem' }
        rejects:
          type: array
          items: { $ref: '#/components/schemas/RejectItem' }
        parked_podium:
          type: array
          items: { type: string }

    BackupImport:
      type: object
      properties:
        meta: { $ref: '#/components/schemas/Meta' }
        settings: { $ref: '#/components/schemas/Settings' }
        ratings:
          type: array
          items: { $ref: '#/components/schemas/RatingItem' }
        parked:
          type: array
          items: { $ref: '#/components/schemas/ParkedItem' }
        rejects:
          type: array
          items: { $ref: '#/components/schemas/RejectItem' }
        parked_podium:
          type: array
          items: { type: string }

paths:
  /meta:
    get:
      security: []
      tags: [Meta]
      operationId: getMeta
      summary: Lire le meta (menu, accueil)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Meta' }
    put:
      tags: [Meta]
      operationId: putMeta
      summary: Mettre à jour le meta (merge profond — patch-like)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MetaPatch' }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  meta: { $ref: '#/components/schemas/Meta' }

  /meta/menu:
    get:
      security: []
      tags: [Meta]
      operationId: getMenu
      summary: Lire uniquement le menu + welcome_template
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  menu:
                    type: array
                    items:
                      type: object
                      properties:
                        num: { type: integer }
                        emoji: { type: string }
                        label: { type: string }
                  welcome_template: { type: string }
    put:
      tags: [Meta]
      operationId: putMenu
      summary: Mettre à jour uniquement le menu (et éventuellement welcome_template)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MenuUpdate' }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  meta: { $ref: '#/components/schemas/Meta' }

  /settings:
    get:
      security: []
      tags: [Settings]
      operationId: getSettings
      summary: Lire les réglages persistants
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Settings' }
    put:
      tags: [Settings]
      operationId: putSettings
      summary: Modifier les réglages persistants (patch complet)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Settings' }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  settings: { $ref: '#/components/schemas/Settings' }

  /lists/ratings:
    get:
      tags: [Lists]
      operationId: getRatings
      summary: Lire la liste des notes persistées
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ListResponse' }
    post:
      tags: [Lists]
      operationId: addRating
      summary: Ajouter une note
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RatingItem' }
      responses:
        "201":
          description: Créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/WriteResult' }

  /lists/parked:
    get:
      tags: [Lists]
      operationId: getParked
      summary: Lire la liste des titres mis de côté
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ListResponse' }
    post:
      tags: [Lists]
      operationId: addParked
      summary: Ajouter un titre mis de côté
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ParkedItem' }
      responses:
        "201":
          description: Créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/WriteResult' }

  /lists/rejects:
    get:
      tags: [Lists]
      operationId: getRejects
      summary: Lire la liste des titres rejetés
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ListResponse' }
    post:
      tags: [Lists]
      operationId: addReject
      summary: Ajouter un titre rejeté
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RejectItem' }
      responses:
        "201":
          description: Créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/WriteResult' }

  /lists/parked_podium:
    get:
      tags: [Lists]
      operationId: getParkedPodium
      summary: Lire le podium des mis de côté
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items: { type: string }
        "401":
          description: Jeton API manquant ou invalide
        "503":
          description: KV DB non liée au Worker
    put:
      tags: [Lists]
      operationId: putParkedPodium
      summary: Mettre à jour le podium des mis de côté
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                keys:
                  type: array
                  items: { type: string }
              required: [keys]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  keys:
                    type: array
                    items: { type: string }
        "401":
          description: Jeton API manquant ou invalide
        "503":
          description: KV DB non liée au Worker

  /backup/export:
    get:
      tags: [Backup]
      operationId: backupExport
      summary: Exporter toutes les données persistées (meta, settings, ratings, parked, rejects, podium)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BackupExport' }

  /backup/import:
    post:
      tags: [Backup]
      operationId: backupImport
      summary: Importer des données persistées
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BackupImport' }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/WriteResult' }

  /cache/pool:
    get:
      tags: [Cache]
      operationId: getCachePool
      summary: Récupérer un lot de listes pour alimenter le cache local
      description: >
        Retourne `ratings`, `parked` et `rejects` en une requête. Répétez `key` pour limiter
        la réponse. `keys`/`keys[]` acceptent une chaîne de clés séparées par virgule ou espace.
        Les tableaux JSON (ex: `["ratings"]`) renvoient 400.
      parameters:
        - name: key
          in: query
          description: Liste cible (ratings, parked, rejects). Peut être répété.
          required: false
          schema:
            type: string
        - name: keys
          in: query
          description: Variante permettant de passer plusieurs clés sous forme de chaîne.
            Séparer les clés par des virgules ou des espaces. Les tableaux JSON ne sont pas acceptés.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CachePoolResponse' }

  /l1:
    get:
      tags: [Recommendations]
      operationId: getL1Recommendation
      summary: Générer une recommandation L1 déterministe
      description: >
        Produit une carte de recommandation unique en appliquant la logique L1 :
        filtrage du type/genre demandé sur Allociné, comparaison avec les listes
        en cache et scoring prédictif pour retenir le meilleur titre.
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [film, serie]
        - name: genre
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/L1Recommendation' }
        "400":
          description: Paramètres manquants ou invalides
        "404":
          description: Aucun titre valide trouvé

  /diag:
    get:
      tags: [Diagnostics]
      operationId: getDiagnostics
      summary: Vérifier l’état global du Worker
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DiagResponse' }

  /health:
    get:
      tags: [Diagnostics]
      operationId: getHealth
      summary: Vérifier la disponibilité du Worker
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
